Yes, it is possible to update a model every time a row in an HTML table is changed. To achieve this, you can use JavaScript to capture the changes made by the user and update the corresponding model accordingly. Here's a general outline of how you can accomplish this:

1. **HTML Table Structure**:
   Ensure that your HTML table has a clear structure and unique identifiers for each row and cell. You may use `data-` attributes to associate rows with your models.

2. **JavaScript Event Listeners**:
   Attach event listeners to the table rows (or specific cells) to capture changes. For your case, you can use the `dblclick` event to allow users to edit the content and, for instance, the `blur` event to save the changes when the user exits the cell.

3. **Data Model**:
   Maintain a JavaScript data model that reflects the schema of your tables. This model can be an array of objects, where each object corresponds to a row in the table. Whenever a change occurs, update the corresponding object in your data model.

4. **Update Function**:
   Write a function that updates the data model when a change event occurs. This function should be called whenever a user modifies a cell.

Here's a simplified example:

```html
<table>
  <tr data-row-id="1">
    <td contenteditable="true" data-cell-id="name">John Doe</td>
    <td contenteditable="true" data-cell-id="age">30</td>
  </tr>
  <!-- More rows... -->
</table>

<script>
  const dataModel = [
    { id: 1, name: 'John Doe', age: 30 },
    // Add data for other rows...
  ];

  // Attach event listeners
  const table = document.querySelector('table');
  table.addEventListener('dblclick', (event) => {
    if (event.target.tagName === 'TD') {
      event.target.contentEditable = true;
      event.target.focus();
    }
  });

  table.addEventListener('blur', (event) => {
    if (event.target.tagName === 'TD') {
      const rowId = event.target.parentElement.dataset.rowId;
      const cellId = event.target.dataset.cellId;
      const newValue = event.target.innerText;
      updateDataModel(rowId, cellId, newValue);
      event.target.contentEditable = false;
    }
  });

  function updateDataModel(rowId, cellId, newValue) {
    const row = dataModel.find((item) => item.id === parseInt(rowId, 10));
    if (row) {
      row[cellId] = newValue;
      // You can also update your server/database with the new data here.
      console.log(dataModel); // Display the updated data model.
    }
  }
</script>
```

In this example, when a user double-clicks on a table cell, it becomes editable. When the cell loses focus (e.g., the user clicks elsewhere or presses Enter), the data model is updated with the new value. You can adapt this concept to your specific models and needs. Additionally, consider data validation and other error handling as required by your application.